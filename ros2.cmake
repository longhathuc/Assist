set(CMAKE_INSTALL_PREFIX ${ASSIST_BINARY_DIR}/install)

list(APPEND CMAKE_PREFIX_PATH ${ASSIST_BINARY_DIR}/cmake)

#this directory is only seen by the first cmake (i.e. not colcon)
list(APPEND CMAKE_PREFIX_PATH ${ASSIST_BINARY_DIR}/colcon-cmake)

set(ASSIST_PATH "" CACHE INTERNAL "ASSIST_PATH")

macro(internal_add_ros2_module)
    #colcon_build : we need to change the build directory to a specific directory (cmake-free) since colcon late may have conflict with current cmake config
    get_filename_component(PROG_NAME ${ARGV0} NAME_WE)

    set(ASSIST_PATH "${ARGV0};${ASSIST_PATH}" CACHE INTERNAL "ASSIST_PATH")

    set_target_properties(${PROG_NAME}
        PROPERTIES
        EXCLUDE_FROM_ALL 1 EXCLUDE_FROM_DEFAULT_BUILD 1
        ARCHIVE_OUTPUT_DIRECTORY "${ASSIST_BINARY_DIR}/colcon_build/${PROG_NAME}/lib"
        LIBRARY_OUTPUT_DIRECTORY "${ASSIST_BINARY_DIR}/colcon_build/${PROG_NAME}/lib"
        RUNTIME_OUTPUT_DIRECTORY "${ASSIST_BINARY_DIR}/colcon_build/${PROG_NAME}/bin"
    )

    #tell the "real" cmake (i.e. not colcon) that there is a target. In the end they are not build by the system
    file(WRITE ${ASSIST_BINARY_DIR}/colcon-cmake/${PROG_NAME}Config.cmake)
endmacro(internal_add_ros2_module)

macro(internal_add_ros2_plugin)
    add_subdirectory(${ARGV0} ${ARGV1})

    if(EXISTS "${ARGV0}/package.xml")
        internal_add_ros2_module(${ARGV0})
    endif()
endmacro(internal_add_ros2_plugin)

macro(add_ros2_plugin)
    set(DEPENDENCIES True)

    get_plugin_path(${ARGV0} PLUGIN_PATH BUILD_PLUGIN_PATH)

    if(EXISTS "${PLUGIN_PATH}/dependencies.in")
        check_dependencies(${PLUGIN_PATH})
    endif()

    if (${DEPENDENCIES})
        internal_add_ros2_plugin(${PLUGIN_PATH} ${BUILD_PLUGIN_PATH})
    endif()
endmacro(add_ros2_plugin)

# target_get_linked_libraries.cmake
#
function(list_add_if_not_present list elem)
    list(FIND "${list}" "${elem}" exists)
    if(exists EQUAL -1)
        list(APPEND "${list}" "${elem}")
        set("${list}" "${${list}}" PARENT_SCOPE)
     endif()
endfunction()

macro(_target_get_linked_libraries_in _target _outlist)
    list_add_if_not_present("${_outlist}" "${_target}")

    # get libraries
    get_target_property(target_type "${_target}" TYPE)
    if (${target_type} STREQUAL "INTERFACE_LIBRARY")
        get_target_property(libs "${_target}" INTERFACE_LINK_LIBRARIES)
    else()
        get_target_property(libs "${_target}" LINK_LIBRARIES)
    endif()

    foreach(lib IN LISTS libs)
        if(NOT TARGET "${lib}")
            continue()
        endif()

        list(FIND "${_outlist}" "${lib}" exists)
        if(NOT exists EQUAL -1)
            continue()
        endif()

        _target_get_linked_libraries_in("${lib}" "${_outlist}")

    endforeach()
endmacro()

function(target_get_linked_libraries _target _outlist)
    set(${_outlist} "${_target}")
    _target_get_linked_libraries_in(${_target} ${_outlist})
    set(${_outlist} ${${_outlist}} PARENT_SCOPE)
endfunction()

macro(add_ros2_autoload)
    file(REMOVE ${ASSIST_INSTALL_LIBS}/plugins/lib${ARGV1}.so)

    file(READ ${ARGV0}/autoload.in AUTOLOAD_DEPENDENCIES)
    string(REPLACE " " ";" AUTOLOAD_DEPENDENCIES ${AUTOLOAD_DEPENDENCIES}) # replace space by ; so that it's a list
    string(REPLACE "\n" ";" AUTOLOAD_DEPENDENCIES ${AUTOLOAD_DEPENDENCIES}) # replace new line by ; so that it's a list
    list(REMOVE_ITEM AUTOLOAD_DEPENDENCIES "") # Remove empty imtem

    if (NOT "NO_AUTO_LOAD" IN_LIST AUTOLOAD_DEPENDENCIES)
        string(REPLACE "-" "::" NAMESPACE ${ARGV1})
        string(REPLACE "." "::" NAMESPACE ${NAMESPACE})

        file(WRITE ${ASSIST_BINARY_DIR}/${ARGV1}_autoload/autoload.cpp
        "namespace ${NAMESPACE} { const char * autoload=\"autoload=[${AUTOLOAD_DEPENDENCIES}]\"; } ")

        file(WRITE ${ASSIST_BINARY_DIR}/${ARGV1}_autoload/CMakeLists.txt
"#This file is automatically generated do not modify it
cmake_minimum_required(VERSION 3.5)
project(${ARGV1}_autoload)

set(CMAKE_CXX_FLAGS -Wl,--no-as-needed)

find_package(ament_cmake REQUIRED)
find_package(ament_cmake_auto REQUIRED)
ament_auto_find_build_dependencies(REQUIRED ${ARGV1})

link_directories(${ASSIST_BINARY_DIR}/colcon_build/${ARGV1})
find_package(${ARGV1} REQUIRED)
add_library(${ARGV1}_autoload SHARED autoload.cpp)
target_link_libraries(${ARGV1}_autoload ${ARGV1})
target_link_libraries(${ARGV1}_autoload )

ament_target_dependencies(${ARGV1}_autoload ${ARGV1} )
ament_auto_package()
")

file(WRITE ${ASSIST_BINARY_DIR}/${ARGV1}_autoload/package.xml "<?xml version='1.0'?>
<?xml-model href='http://download.ros.org/schema/package_format3.xsd' schematypens='http://www.w3.org/2001/XMLSchema'?>
<!--This file is automatically generated do not modify it-->
<package format='3'>
    <name>${ARGV1}_autoload</name>
    <version>0.0.0</version>
    <description>TODO: Package description</description>
    <maintainer email='hcourtecuisse@unistra.fr'>Hadrien Courtecuisse</maintainer>
    <license>TODO: License declaration</license>
    <depend>${ARGV1}</depend>
    <export>
        <build_type>ament_cmake</build_type>
    </export>
</package>
")

        list(APPEND AUTOLAD_PATH_CACHE ${ASSIST_BINARY_DIR}/${ARGV1}_autoload)
        list(APPEND AUTOLAD_MODULE_CACHE ${ARGV1}_autoload)

    else()
        file(REMOVE ${ASSIST_INSTALL_LIBS}/lib${ARGV1}_autoload.so)
    endif()
endmacro()

macro(colconBuild)
    set(ASSIST_PATH_CACHE ${ASSIST_PATH})
    list(REMOVE_ITEM ${ASSIST_PATH_CACHE} "") # Remove empty imtem

    foreach(MODULE_PATH IN LISTS ASSIST_PATH_CACHE)
        get_filename_component(PLUGIN ${MODULE_PATH} NAME)
        list(APPEND ASSIST_MODULE_CACHE ${PLUGIN})

        if(EXISTS "${MODULE_PATH}/autoload.in")
            add_ros2_autoload(${MODULE_PATH} ${PLUGIN})
        endif()
    endforeach()

#    project(cmake_colconBuild)

    set(ROS_PREFIX_PATH "${ASSIST_BINARY_DIR}/cmake")
    foreach(PREFIX IN LISTS CMAKE_PREFIX_PATH)
        get_filename_component(ABSOLUTE_PATH ${PREFIX} ABSOLUTE)
        if ((NOT "${ABSOLUTE_PATH}" STREQUAL "${ASSIST_BINARY_DIR}/cmake") AND
            (NOT "${ABSOLUTE_PATH}" STREQUAL "${ASSIST_BINARY_DIR}/colcon-cmake") AND
            (NOT "${ABSOLUTE_PATH}" STREQUAL "/usr")
           )

            string(CONCAT ROS_PREFIX_PATH "${ROS_PREFIX_PATH}" "\;" "${ABSOLUTE_PATH}")
        endif()
    endforeach()
#    message("ROS_PREFIX_PATH : ${ROS_PREFIX_PATH}")

    add_custom_target(
        colconBuildCall ALL
    #    env SOFA_INSTALL_DIRECTORY=${SOFA_INSTALL_DIRECTORY}
    #    env PYTHONPATH=$ENV{PYTHONPATH}":/opt/ros/foxy/lib/python3.8/site-packages/"

        COMMAND ${CMAKE_COMMAND} -E
        env "COLCON_LOG_PATH=${ASSIST_BINARY_DIR}/log"
        env "ROS_VERSION=$ENV{ROS_VERSION}"
        env "ROS_PYTHON_VERSION=$ENV{ROS_PYTHON_VERSION}"
        env "AMENT_PREFIX_PATH=$ENV{AMENT_PREFIX_PATH}"
        env "PYTHONPATH=$ENV{PYTHONPATH}"
        env "LD_LIBRARY_PATH=$ENV{LD_LIBRARY_PATH}"
        env "ROS_LOCALHOST_ONLY=$ENV{ROS_LOCALHOST_ONLY}"
        env "PATH=$ENV{PATH}"
        env "ROS_DISTRO=$ENV{ROS_DISTRO}"
        env "VERBOSE=1"
        env "MAKEFLAGS=-j8"
        colcon build
        --paths ${ASSIST_PATH_CACHE};${AUTOLAD_PATH_CACHE}
        --event-handlers console_direct+
        --build-base ${ASSIST_BINARY_DIR}/colcon_build
        --install-base ${ASSIST_BINARY_DIR}/install
        --symlink-install
        --packages-up-to ${ASSIST_MODULE_CACHE};${AUTOLAD_MODULE_CACHE}
        --cmake-args -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        --cmake-args -DCMAKE_PREFIX_PATH="${ROS_PREFIX_PATH}"


#        COMMAND VERBOSE=1 MAKEFLAGS=-j8 colcon build
#        --paths ${ASSIST_PATH_CACHE};${AUTOLAD_PATH_CACHE}
#        --event-handlers console_direct+
##        --executor sequential
#        --build-base ${ASSIST_BINARY_DIR}/colcon_build
#        --install-base ${ASSIST_BINARY_DIR}/install
#        --symlink-install
##        --cmake-args -DSOFA_INSTALL_DIRECTORY:PATH=${SOFA_INSTALL_DIRECTORY}
##        --cmake-args -DCMAKE_PREFIX_PATH:PATH=${ASSIST_BINARY_DIR}/cmake
#        --packages-up-to ${ASSIST_MODULE_CACHE};${AUTOLAD_MODULE_CACHE}
##        --cmake-args -DCMAKE_C_FLAGS="-g2"
##        --cmake-args -DCMAKE_CXX_FLAGS="-g2"
#        --cmake-args -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
##        --cmake-args -DCMAKE_INSTALL_PREFIX=${ASSIST_BINARY_DIR}/install
#        --cmake-args -DCMAKE_PREFIX_PATH="${ROS_PREFIX_PATH}"
##        --cmake-force-configure
    )

    #find dependencies of all ros2 modules :)
    set(GLOBAL_DEPENDENCIES "")
    foreach(MODULE IN LISTS ASSIST_MODULE_CACHE)
        target_get_linked_libraries(${MODULE} DEPENDENCIES)
        list(APPEND GLOBAL_DEPENDENCIES "${DEPENDENCIES}")
    endforeach()

    #remove dependencies of colcon built modules or cmake force its compilation
    foreach(MODULE IN LISTS ASSIST_MODULE_CACHE)
        list(REMOVE_ITEM GLOBAL_DEPENDENCIES ${MODULE})
    endforeach()

#        MESSAGE("GLOBAL_DEPENDENCIES : |${GLOBAL_DEPENDENCIES}|")
    if(NOT "${GLOBAL_DEPENDENCIES}" STREQUAL "")
        message(NOTICE "==================================================")
        message(NOTICE "COLCON MODULES : ${ASSIST_MODULE_CACHE}")
        message(NOTICE "COLCON AUTOLOAD : ${AUTOLAD_MODULE_CACHE}")
        message(NOTICE "==================================================")

        add_dependencies(colconBuildCall ${GLOBAL_DEPENDENCIES})

        add_library(cmake_colconBuild INTERFACE ${LINK_DEPENDEENCIES})
        target_link_libraries(cmake_colconBuild INTERFACE)


        #Post build cmake script ==> copy lib to install dir
        foreach(MODULE_PATH IN LISTS ASSIST_PATH_CACHE)
            get_filename_component(MODULE ${MODULE_PATH} NAME)

            add_custom_command(
                TARGET colconBuildCall POST_BUILD
                COMMAND ${CMAKE_COMMAND} -P ${ASSIST_BINARY_DIR}/cmake-generated/copy_to_lib.cmake
                "${ASSIST_BINARY_DIR}/colcon_build/${MODULE}"
            )

            if(NOT EXISTS "${MODULE_PATH}/autoload.in")
                file(REMOVE ${ASSIST_INSTALL_LIBS}/lib${MODULE}_autoload.so)
                add_custom_command(
                    TARGET colconBuildCall POST_BUILD
                    COMMAND ${CMAKE_COMMAND} -P ${ASSIST_BINARY_DIR}/cmake-generated/create_assist_link.cmake ${ASSIST_INSTALL_LIBS}/lib${MODULE}.so
                )
            endif()
        endforeach()


        #Post build cmake script ==> copy lib to install dir
        foreach(MODULE_PATH IN LISTS AUTOLAD_MODULE_CACHE)
            get_filename_component(MODULE ${MODULE_PATH} NAME)

            add_custom_command(
                TARGET colconBuildCall POST_BUILD
                COMMAND ${CMAKE_COMMAND} -P ${ASSIST_BINARY_DIR}/cmake-generated/copy_to_lib.cmake
                "${ASSIST_BINARY_DIR}/colcon_build/${MODULE}"
            )
        endforeach()
    endif()
endmacro(colconBuild)


set(COLCON_ROS_DISTRO "humble" CACHE STRING "" FORCE)
set(COLCON_ROS_VERSION 2 CACHE STRING "" FORCE)
set(COLCON_ROS_PYTHON_VERSION 3 CACHE STRING "" FORCE)
set(COLCON_ROS_LOCALHOST_ONLY 0 CACHE STRING "" FORCE)


set(COLCON_ROS_PATH "/opt/ros/${COLCON_ROS_DISTRO}" CACHE PATH "" FORCE)
set(COLCON_AMENT_PREFIX_PATH "${COLCON_ROS_PATH}" CACHE PATH "" FORCE)
set(COLCON_PYTHONPATH "${COLCON_ROS_PATH}/lib/python3.10/site-packages:${COLCON_ROS_PATH}/local/lib/python3.10/dist-packages" CACHE PATH "" FORCE)
set(COLCON_LD_LIBRARY_PATH "${COLCON_ROS_PATH}/opt/rviz_ogre_vendor/lib:${COLCON_ROS_PATH}/lib/x86_64-linux-gnu:${COLCON_ROS_PATH}/lib" CACHE PATH "" FORCE)
set(COLCON_PATH "${COLCON_ROS_PATH}/bin" CACHE PATH "" FORCE)


set(ENV{ROS_VERSION} ${COLCON_ROS_VERSION})
set(ENV{ROS_PYTHON_VERSION} ${COLCON_ROS_PYTHON_VERSION})
set(ENV{ROS_LOCALHOST_ONLY} ${COLCON_ROS_LOCALHOST_ONLY})
set(ENV{ROS_DISTRO} ${COLCON_ROS_DISTRO})

set(ENV{AMENT_PREFIX_PATH} $ENV{AMENT_PREFIX_PATH}:${COLCON_AMENT_PREFIX_PATH})
set(ENV{PYTHONPATH} ${COLCON_PYTHONPATH}:$ENV{PYTHONPATH})
set(ENV{LD_LIBRARY_PATH} ${COLCON_LD_LIBRARY_PATH}:$ENV{LD_LIBRARY_PATH})
set(ENV{PATH} ${COLCON_PATH}:$ENV{PATH})
