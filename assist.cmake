set(ASSIST_BINARY_DIR "${CMAKE_BINARY_DIR}/assist")

set(ASSIST_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/install)
set(ASSIST_INSTALL_LIBS ${CMAKE_BINARY_DIR}/install/lib)
set(ASSIST_INSTALL_BIN ${CMAKE_BINARY_DIR}/install/bin)
set(ASSIST_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/install/bin)


set(CMAKE_INSTALL_PREFIX ${ASSIST_INSTALL_PREFIX})
set(CMAKE_INSTALL_LIBS ${ASSIST_INSTALL_LIBS})
set(CMAKE_INSTALL_BIN ${ASSIST_INSTALL_BIN})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${ASSIST_RUNTIME_OUTPUT_DIRECTORY})


list(APPEND CMAKE_PREFIX_PATH "${ASSIST_BINARY_DIR}/cmake")

list(APPEND ASSIST_PATH "")
list(APPEND ASSIST_MODULE "")
list(APPEND ASSIST_SOURCES "")

#create the post build script file to make a link in the plugin directory
file(WRITE ${ASSIST_BINARY_DIR}/cmake-generated/create_assist_link.cmake "#This file is generated automatically do not modify it
if(EXISTS $\{CMAKE_ARGV3\})
    get_filename_component(FILE $\{CMAKE_ARGV3\} NAME)

    file( CREATE_LINK $\{CMAKE_ARGV3\}
        ${ASSIST_INSTALL_LIBS}/plugins/$\{FILE\} SYMBOLIC )
else()
    message(NOTICE \"CREATE LINK NOT FOUND : $\{CMAKE_ARGV3\}\")
endif()
")

#create the post build script file to copy lib to install directory
file(WRITE ${ASSIST_BINARY_DIR}/cmake-generated/copy_to_lib.cmake "#This file is automatically generated do not modify it
file(GLOB LIB_FILES \"$\{CMAKE_ARGV3\}/*.so\")
foreach(LIB IN LISTS LIB_FILES)
    file(COPY $\{LIB\} DESTINATION ${ASSIST_INSTALL_LIBS})
endforeach()
")

file(MAKE_DIRECTORY ${ASSIST_INSTALL_LIBS}/plugins)

macro(add_search_path)
    list(APPEND ASSIST_WORK_DIRECTORY "${ARGV0}")
endmacro(add_search_path)


macro(make_plugin_autoload)
    if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/autoload.in")
        file(READ ${ARGV0}/autoload.in AUTOLOAD_DEPENDENCIES)
        string(REPLACE " " ";" AUTOLOAD_DEPENDENCIES ${AUTOLOAD_DEPENDENCIES}) # replace space by ; so that it's a list
        string(REPLACE "\n" ";" AUTOLOAD_DEPENDENCIES ${AUTOLOAD_DEPENDENCIES}) # replace new line by ; so that it's a list
        list(REMOVE_ITEM AUTOLOAD_DEPENDENCIES "") # Remove empty imtem

        file(REMOVE ${ASSIST_INSTALL_LIBS}/plugins/lib${ARGV1}.so)

        if (NOT "NO_AUTO_LOAD" IN_LIST AUTOLOAD_DEPENDENCIES)
            string(REPLACE "-" "::" NAMESPACE ${ARGV1})
            string(REPLACE "." "::" NAMESPACE ${NAMESPACE})

            file(WRITE ${ASSIST_BINARY_DIR}/${ARGV1}/autoload/autoload.cpp
            "namespace ${NAMESPACE} { const char * autoload=\"autoload=[${AUTOLOAD_DEPENDENCIES}]\"; } ")

            project(${ARGV1}_autoload)
            set(CMAKE_CXX_FLAGS -Wl,--no-as-needed)
            add_library(${ARGV1}_autoload SHARED ${ASSIST_BINARY_DIR}/${ARGV1}/autoload/autoload.cpp)
            target_link_libraries(${ARGV1}_autoload ${ARGV1})

            set_target_properties(${ARGV1}_autoload PROPERTIES
                LIBRARY_OUTPUT_DIRECTORY ${ASSIST_INSTALL_LIBS})
        else()
            file(REMOVE ${ASSIST_INSTALL_LIBS}/lib${ARGV1}_autoload.so)
        endif()
    else()
        add_custom_target(
            ${ARGV1}_LINK ALL
            COMMAND ${CMAKE_COMMAND} -P ${ASSIST_BINARY_DIR}/cmake-generated/create_assist_link.cmake ${CMAKE_INSTALL_LIBS}/lib${ARGV1}.so
        )
        add_dependencies(${ARGV1}_LINK ${ARGV1})
    endif()
endmacro(make_plugin_autoload)

#If the file dependencies.in we check that dependencies are satisfied before activating the plugin
function(check_dependencies)
    file(READ ${ARGV0}/dependencies.in READING_DEPENDENCIES)

    string(REPLACE " " ";" READING_DEPENDENCIES ${READING_DEPENDENCIES}) # replace space by ; so that it's a list
    string(REPLACE "\n" ";" READING_DEPENDENCIES ${READING_DEPENDENCIES}) # replace new line by ; so that it's a list
    list(REMOVE_ITEM READING_DEPENDENCIES "") # Remove empty imtem

    #chek that all dependencies exist
    FOREACH(FILE_DEP ${READING_DEPENDENCIES})
        find_package(${FILE_DEP} QUIET)
        if (NOT ${FILE_DEP}_FOUND)
            message(NOTICE "WARNING : DEPENDENCIES \"${FILE_DEP}\" NOT FOUND ${ARGV0} not activated")
            set(DEPENDENCIES False PARENT_SCOPE)

            get_filename_component(PROG_NAME ${ARGV0} NAME_WE)
            file(REMOVE ${ASSIST_BINARY_DIR}/cmake/${PROG_NAME}Config.cmake)
            file(REMOVE ${ASSIST_BINARY_DIR}/cmake/${PROG_NAME}Targets.cmake)
            return()
        endif()
    ENDFOREACH()
endfunction(check_dependencies)

macro(get_plugin_path PLUGIN_PATH BUILD_PLUGIN_PATH)
    set(${ARGV1} ${ARGV0})
    set(${ARGV2} ${ARGV0})

    FOREACH(DIR_TEST ${ASSIST_WORK_DIRECTORY})
        if(EXISTS ${DIR_TEST}/${ARGV0})
            get_filename_component(FULL_PATH "${DIR_TEST}/${ARGV0}" ABSOLUTE)
            string(REPLACE "$ENV{HOME}/" "" RELATIVE_PATH ${FULL_PATH}) # replace space by ; so that it's a list

            set(${ARGV1} ${FULL_PATH})
            set(${ARGV2} ${ASSIST_BINARY_DIR}/${RELATIVE_PATH})
        endif()
    ENDFOREACH()
endmacro(get_plugin_path)

macro(add_assist_plugin)
    set(DEPENDENCIES True)

    get_plugin_path(${ARGV0} PLUGIN_PATH BUILD_PLUGIN_PATH)

    if(EXISTS "${PLUGIN_PATH}/dependencies.in")
        check_dependencies(${PLUGIN_PATH})
    endif()

    if (${DEPENDENCIES})
        add_subdirectory(${PLUGIN_PATH} ${BUILD_PLUGIN_PATH})
    endif()
endmacro(add_assist_plugin)

macro(create_package)
    get_target_property(TARGET_INCLUDE ${PROJECT_NAME} INCLUDE_DIRECTORIES)
    target_include_directories(${PROJECT_NAME} PUBLIC
        "$<BUILD_INTERFACE:${TARGET_INCLUDE}>"
        "$<INSTALL_INTERFACE:src>"
    )

    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.cmake.in
                   ${ASSIST_BINARY_DIR}/cmake/${PROJECT_NAME}Config.cmake @ONLY)

    file(APPEND ${ASSIST_BINARY_DIR}/cmake/${PROJECT_NAME}Config.cmake
        "if(NOT TARGET ${PROJECT_NAME})
            include(\${CMAKE_CURRENT_LIST_DIR}/${PROJECT_NAME}Targets.cmake)
        endif()"
    )

    install(
        TARGETS ${PROJECT_NAME}
        EXPORT ${PROJECT_NAME}
    )

    export(
        EXPORT ${PROJECT_NAME}
        FILE "${ASSIST_BINARY_DIR}/cmake/${PROJECT_NAME}Targets.cmake"
    )

    set_target_properties(${PROJECT_NAME} PROPERTIES
        ARCHIVE_OUTPUT_DIRECTORY ${ASSIST_INSTALL_LIBS}
        LIBRARY_OUTPUT_DIRECTORY ${ASSIST_INSTALL_LIBS}
        RUNTIME_OUTPUT_DIRECTORY ${CMAKE_INSTALL_BIN})

    make_plugin_autoload(${CMAKE_CURRENT_SOURCE_DIR} ${PROJECT_NAME})
endmacro(create_package)

macro(create_interface)
    get_target_property(TARGET_INCLUDE ${PROJECT_NAME} INCLUDE_DIRECTORIES)
    target_include_directories(${PROJECT_NAME} INTERFACE ${TARGET_INCLUDE})

    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.cmake.in
                   ${ASSIST_BINARY_DIR}/cmake/${PROJECT_NAME}Config.cmake @ONLY)

    file(APPEND ${ASSIST_BINARY_DIR}/cmake/${PROJECT_NAME}Config.cmake
       "if(NOT TARGET ${PROJECT_NAME})
            include(\${CMAKE_CURRENT_LIST_DIR}/${PROJECT_NAME}Targets.cmake)
       endif()"
    )

    install(
        TARGETS ${PROJECT_NAME}
        EXPORT ${PROJECT_NAME}
    )

    export(
        EXPORT ${PROJECT_NAME}
        FILE "${ASSIST_BINARY_DIR}/cmake/${PROJECT_NAME}Targets.cmake"
    )
endmacro(create_interface)



file(GLOB_RECURSE CLEAN_AUTOLOAD
    "${ASSIST_INSTALL_LIBS}/*_autoload.so"
    "${ASSIST_INSTALL_LIBS}/plugins/*"
    "${ASSIST_BINARY_DIR}/cmake/*"
)
if (NOT "${CLEAN_AUTOLOAD}" STREQUAL "")
    file(REMOVE ${CLEAN_AUTOLOAD})
endif()
